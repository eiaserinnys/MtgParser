//////////////////////////////////////////////////////////////////////////////////
//                                                      Mint Virtual Machine Win32
//                                                                   mint::CParser
//                                                        : mint lexer engine core
//
//                                        eias erinys fecit, began at 2002. 10. 22
//                                          eias@nexon.co.kr, sheplany@nownuri.net
//////////////////////////////////////////////////////////////// component of Mint

#include "pch.h"
#include <Script/MintLP/MintParser.h>

//////////////////////////////////////////////////////////////////////////////////
CParser::parsed::parsed()
// : constructor
//////////////////////////////////////////////////////////////////////////////////
{
	dwSymbol		= 0;
	dwCol		= 0;
	dwRow		= 0;
	pValue		= NULL;
	dwParsedNo	= 0;
	dwRule		= 0;
	bTerminal	= false;

	pParsed		= (parsed**) (((unsigned char*) this) + sizeof(parsed));
}

//////////////////////////////////////////////////////////////////////////////////
void CParser::parsed::Set(
	unsigned _dwSymbol, 
	unsigned _dwCol, 
	unsigned _dwRow, 
	unsigned _dwRule, 
	unsigned _dwParsedNo, 
	void* _pValue, 
	const Core::String& _strText,
	bool _bTerminal)
// :
//////////////////////////////////////////////////////////////////////////////////
{
	dwSymbol	= _dwSymbol;
	dwCol		= _dwCol;
	dwRow		= _dwRow;
	dwRule		= _dwRule;
	dwParsedNo	= _dwParsedNo;
	pValue		= _pValue;
	strText		= _strText;
	bTerminal	= _bTerminal;
}

//////////////////////////////////////////////////////////////////////////////////
CParser::CParsed::CParsed()

	: m_pParent(NULL)
	, m_dwMagic(0xffffffff)
	, m_pParsed(NULL)
	, m_strMsg(L"null parsed result")

// : constructor
//////////////////////////////////////////////////////////////////////////////////
{
}

//////////////////////////////////////////////////////////////////////////////////
CParser::CParsed::CParsed(
	CParser* _pParent, 
	unsigned _dwMagic, 
	parsed* _pParsed)
	
	: m_pParent(_pParent)
	, m_dwMagic(_dwMagic)
	, m_pParsed(_pParsed)
	, m_strMsg(L"OK")

// : constructor
//////////////////////////////////////////////////////////////////////////////////
{
	assert(("CParser::CParsed::CParsed() : parent should be given", _pParent != NULL));
	assert(("CParser::CParsed::CParsed() : null pointer given", _pParsed != NULL));
}

//////////////////////////////////////////////////////////////////////////////////
CParser::CParsed::CParsed(
	CParser* _pParent, 
	unsigned _dwMagic, 
	const Core::String& _strMsg)

	: m_pParent(_pParent)
	, m_dwMagic(_dwMagic)
	, m_pParsed(NULL)
	, m_strMsg(_strMsg)

// : constructor
//////////////////////////////////////////////////////////////////////////////////
{
	assert(("CParser::CParsed::CParsed() : parent should be given", _pParent != NULL));
}

//////////////////////////////////////////////////////////////////////////////////
CParser::CParsed::CParsed(const CParsed& _1)
// : copy constructor
//////////////////////////////////////////////////////////////////////////////////
{
	operator = (_1);
}

//////////////////////////////////////////////////////////////////////////////////
bool CParser::CParsed::IsOK()
// : check that parsing result is ok
//////////////////////////////////////////////////////////////////////////////////
{
	return (m_pParent != NULL && m_pParsed != NULL);
}

//////////////////////////////////////////////////////////////////////////////////
void* CParser::CParsed::Evaluate()
// : now evaluate
//////////////////////////////////////////////////////////////////////////////////
{
	if (m_pParsed == NULL)
		return NULL;

	return m_pParent->Evaluate(*this);
}

//////////////////////////////////////////////////////////////////////////////////
CParser::evaluated::evaluated() 

	: dwCol(0)
	, dwRow(0)
	, pValue(NULL)

// : constructor
//////////////////////////////////////////////////////////////////////////////////
{
}

//////////////////////////////////////////////////////////////////////////////////
CParser::evaluated::evaluated(
	const evaluated& _1)

	: dwCol(_1.dwCol)
	, dwRow(_1.dwRow)
	, strText(_1.strText)
	, pValue(_1.pValue)

// : constructor
//////////////////////////////////////////////////////////////////////////////////
{
}

//////////////////////////////////////////////////////////////////////////////////
CParser::evaluated& CParser::evaluated::operator = (
	const evaluated& _1)
// :
//////////////////////////////////////////////////////////////////////////////////
{
	dwCol	= _1.dwCol;
	dwRow	= _1.dwRow;
	strText	= _1.strText;
	pValue	= _1.pValue;

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////
void CParser::evaluated::Set(
	unsigned _dwCol, 
	unsigned _dwRow, 
	const Core::String& _strText,
	void* _pValue)
// :
//////////////////////////////////////////////////////////////////////////////////
{
	dwCol	= _dwCol;
	dwRow	= _dwRow;
	strText	= _strText;
	pValue	= _pValue;
}

//////////////////////////////////////////////////////////////////////////////////
const Core::String
	CParser::CParsed::GetErrorMessage()
// : get error message
//////////////////////////////////////////////////////////////////////////////////
{
	return m_strMsg;
}

//////////////////////////////////////////////////////////////////////////////////
CParser::CParsed& CParser::CParsed::operator = (
	const CParsed& _1)
// : operator = 
//////////////////////////////////////////////////////////////////////////////////
{
	m_pParent	= _1.m_pParent;
	m_strMsg	= _1.m_strMsg;
	m_dwMagic	= _1.m_dwMagic;
	m_pParsed	= _1.m_pParsed;

	return *this;
}
